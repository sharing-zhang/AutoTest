"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.1.4.

## 重点：
    1 数据库
    2 静态文件相关
    3 根路由
    4 模板文件
    5 是否是调试模式
"""
import os
from pathlib import Path

# BASE_DIR：项目根路径
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY：密钥，项目中默认的一些加密用它（不需要关注，可以改，但是不能删）
SECRET_KEY = 'django-insecure-sz@madp0ifx!b)^lg_g!f+5s*w7w_=sjgq-k+erzb%x42$^r!d'

# DEBUG：调试模式，开，开发阶段是true，上线阶段把它设成false
# 设置成开报错信息更完善
DEBUG = True

#在settinqs中配置允许所有服务器访问(局域网访问)
ALLOWED_HOSTS = ['*']

# Application definition
# INSTALLED_APPS   项目所有的app，新建的app要在里面注册
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',  # 跨域
    'django_celery_beat',  # Celery定时任务
    'django_celery_results',  # Celery结果存储
    'myapp'
]

# MIDDLEWARE  中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 跨域配置
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'myapp.middlewares.LogMiddleware.OpLogs'
]

CORS_ORIGIN_ALLOW_ALL = True  # 允许跨域,允许所有IP访问，就不要设置白名单
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    'http://172.16.36.233:8001',#替换成自己的前端url
]

CORS_ORIGIN_WHITELIST = (
'http://172.16.36.233:8001',#替换成自己的前端url
)

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

#遇到OPTION预检不通过时，提示admintoken没法通过预检时，在下放配置即可
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'Authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'X-CSRFToken',
    'ADMINTOKEN',
    'TOKEN',
    'admintoken',
    'token'
)

# ROOT_URLCONF  根路由是哪个文件，根路由的位置可以变
ROOT_URLCONF = 'server.urls'

# TEMPLATES  模板文件存放路径(如果使用django-admin创建的项目，需要手动配，否则找不到)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION  wsgi服务器使用的是哪个
WSGI_APPLICATION = 'server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# DATABASES  数据库链接配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'autotest',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0;",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
# 不用管（内置app相关）
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# 国际化相关，语言，时区
LANGUAGE_CODE = 'zh-hans'

# 时区
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# 日期时间格式
DATE_FORMAT = 'Y-m-d'
DATETIME_FORMAT = 'Y-m-d H:i:s'

# 上传文件路径
# 并在urls.py配置+static
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload/')
MEDIA_URL = '/upload/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# 静态文件配置相关
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 跨域配置
#CORS_ALLOW_CREDENTIALS = True
#CORS_ALLOW_ALL_ORIGINS = True
#CORS_ALLOW_HEADERS = '*'

# ========== Celery配置 ==========
import os

# Celery消息代理配置 (使用Redis)
CELERY_BROKER_URL = 'redis://localhost:6379/0'

# Celery结果后端配置
CELERY_RESULT_BACKEND = 'django-db'

# Celery缓存后端配置
CELERY_CACHE_BACKEND = 'django-cache'

# 任务序列化格式
CELERY_TASK_SERIALIZER = 'json'

# 结果序列化格式
CELERY_RESULT_SERIALIZER = 'json'

# 时区
CELERY_TIMEZONE = TIME_ZONE

# 接受的内容类型
CELERY_ACCEPT_CONTENT = ['json']

# 任务忽略结果
CELERY_IGNORE_RESULT = False

# 结果过期时间（秒）
CELERY_RESULT_EXPIRES = 3600

# 任务路由
CELERY_TASK_ROUTES = {
    'myapp.views.celery_views.*': {'queue': 'default'},
}

# Worker配置
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Beat调度器配置
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# 启用UTC
CELERY_ENABLE_UTC = False
